generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  google_sub     String          @unique
  email          String          @unique
  name           String
  profile_image  String?         @db.Text
  generation     Int
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
  Portfolio      Portfolio?
  Project        Project[]
  LikedPortfolio PortfolioLike[]
  LikedProject   ProjectLike[]
  ProjectMember  ProjectMember[]
  PortfolioView  PortfolioView[]
  ProjectView    ProjectView[]

  @@index([google_sub, email, name])
}

model Portfolio {
  owner                User                   @relation(fields: [id], references: [id])
  id                   Int                    @id
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  view_count           Int                    @default(0)
  like_count           Int                    @default(0)
  introduction         String?
  email                String?
  PortfolioLike        PortfolioLike[]
  PortfolioSkill       PortfolioSkill[]
  PortfolioProject     PortfolioProject[]
  PortfolioPrize       PortfolioPrize[]
  PortfolioCertificate PortfolioCertificate[]
  PortfolioView        PortfolioView[]
}

model PortfolioLike {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])
  portfolio_id Int       @unique
  user_id      Int       @unique
  created_at   DateTime  @default(now())

  @@index([portfolio_id, user_id])
}

model PortfolioView {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  user         User?     @relation(fields: [user_id], references: [id])
  portfolio_id Int
  user_id      Int?
  ip_hash      String?
  created_at   DateTime  @default(now())

  @@index([portfolio_id, user_id, ip_hash])
}

model PortfolioSkill {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  portfolio_id Int
  skill        Skill     @relation(fields: [skill_id], references: [id])
  skill_id     Int
  level        Int
  created_at   DateTime  @default(now())
}

model PortfolioProject {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  portfolio_id Int
  project      Project   @relation(fields: [project_id], references: [id])
  project_id   Int
  order        Int
  created_at   DateTime  @default(now())
}

model PortfolioPrize {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  portfolio_id Int
  name         String
  institution  String?
  prized_at    DateTime
  created_at   DateTime  @default(now())
}

model PortfolioCertificate {
  id           Int       @id @default(autoincrement())
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  portfolio_id Int
  name         String
  institution  String?
  certified_at DateTime
  created_at   DateTime  @default(now())
}

model Project {
  id               Int                @id @default(autoincrement())
  owner            User               @relation(fields: [owner_id], references: [id])
  owner_id         Int
  name             String
  introduction     String
  description      String?
  link             String?            @db.Text
  logo             String?            @db.Text
  start_at         DateTime?
  end_at           DateTime?
  view_count       Int                @default(0)
  like_count       Int                @default(0)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  ProjectSkill     ProjectSkill[]
  ProjectMember    ProjectMember[]
  ProjectField     ProjectField[]
  ProjectImage     ProjectImage[]
  ProjectLike      ProjectLike[]
  ProjectView      ProjectView[]
  PortfolioProject PortfolioProject[]
}

model ProjectLike {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  project_id Int
  user_id    Int
  created_at DateTime @default(now())

  @@index([project_id, user_id])
}

model ProjectView {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])
  project_id Int
  user_id    Int?
  ip_hash    String?
  created_at DateTime @default(now())

  @@index([project_id, user_id, ip_hash])
}

model ProjectSkill {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  project_id Int
  created_at DateTime @default(now())
  skill      Skill    @relation(fields: [skill_id], references: [id])
  skill_id   Int
}

model ProjectMember {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  member     User     @relation(fields: [member_id], references: [id])
  project_id Int
  member_id  Int
  role       String
  created_at DateTime @default(now())
}

model ProjectField {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  project_id Int
  name       Field
  created_at DateTime @default(now())
}

enum Field {
  WEB
  ANDROID
  IOS
  AI
  IOT
  GAME
}

model ProjectImage {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id])
  project_id Int
  link       String   @db.Text
  order      Int
  created_at DateTime @default(now())
}

model EmailAuth {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  auth_code  String
  created_at DateTime @default(now())
}

model Skill {
  id             Int              @id @default(autoincrement())
  name           String
  PortfolioSkill PortfolioSkill[]
  ProjectSkill   ProjectSkill[]
}
