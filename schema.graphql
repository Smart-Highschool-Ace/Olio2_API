### This file was generated by Nexus Schema
### Do not make changes to this file directly


union ExploreResult = Portfolio | Project

type loginResult {
  error: String
  token: String
}

type Mutation {
  authenticateEmail(code: String!, email: String!): statusResult
  checkEmail(email: String!): statusResult
  createProject(project: ProjectCreateInput): String
  createUser(user: UserCreateInput!): User
  deleteProject(id: Int!): String
  deleteUser: User
  likePortfolio(id: Int!): Boolean
  likeProject(id: Int!): Boolean
  login(email: String!, password: String!): loginResult
  sendAuthEmail(email: String!): statusResult
  updatePortfolio(portfolio: PortfolioUpdateInput): statusResult
  updateProject(id: Int!, project: ProjectUpdateInput): String
  updateUser(user: UserUpdateInput!): User
}

type Portfolio {
  certificates: [PortfolioCertificate]
  email: String
  id: Int
  liked: Boolean
  likes: [User]
  link: String
  owner: User
  prizes: [PortfolioPrize]
  projects: [Project]
  skills: [PortfolioSkill]
  view: Int
}

type PortfolioCertificate {
  certified_at: String
  institution: String
  name: String
}

input PortfolioCertificateInput {
  certified_at: String!
  institution: String!
  name: String!
}

type PortfolioPrize {
  institution: String
  name: String
  prized_at: String
}

input PortfolioPrizeInput {
  institution: String!
  name: String!
  prized_at: String!
}

type PortfolioProject {
  order: Int
  project: Project
}

input PortfolioProjectInput {
  order: Int!
  project_id: Int!
}

type PortfolioSkill {
  level: Int
  skill: Skill
}

input PortfolioSkillInput {
  level: Int!
  name: String!
}

input PortfolioUpdateInput {
  certificates: [PortfolioCertificateInput]
  email: String
  prizes: [PortfolioPrizeInput]
  projects: [PortfolioProjectInput]
  skils: [PortfolioSkillInput]
}

type Project {
  created_at: String
  description: String
  end_at: String
  fields: [ProjectField]
  id: Int
  images: [ProjectImage]
  introduction: String
  liked: Boolean
  likes: [User]
  link: String
  logo: String
  members: [ProjectMember]
  name: String
  owner: User
  skills: [Skill]
  start_at: String
  updated_at: String
  view: Int
}

input ProjectCreateInput {
  description: String
  end_at: String
  fields: [ProjectFieldInput]
  images: [ProjectImageInput]
  introduction: String!
  link: String
  members: [ProjectMemberInput]
  name: String!
  skills: [SkillInput]
  start_at: String
}

type ProjectField {
  name: String
}

input ProjectFieldInput {
  name: String!
}

type ProjectImage {
  image: String
  order: Int
}

input ProjectImageInput {
  link: String!
  order: Int
}

type ProjectMember {
  member: User
  role: String
}

input ProjectMemberInput {
  member_id: Int!
  role: String
}

input ProjectUpdateInput {
  description: String
  end_at: String
  fields: [ProjectFieldInput]
  images: [ProjectImageInput]
  introduction: String
  link: String
  members: [ProjectMemberInput]
  name: String
  skills: [SkillInput]
  start_at: String
}

type Query {
  allUser: [User]
  user(id: Int): User
}

type Skill {
  name: String
}

input SkillInput {
  name: String!
}

type statusResult {
  error: String
  status: Boolean
}

type User {
  email: String
  entrance_year: Int
  grade: Int
  id: Int
  introduction: String
  liked_portfolios: [Portfolio]
  liked_projects: [Project]
  name: String
  participated_projects: [Project]
  portfolio: Portfolio
  profile_image: String
  projects: [Project]
  school: String
}

input UserCreateInput {
  email: String!
  entrance_year: Int!
  introduction: String
  name: String!
  password: String!
  profile_image: String
  school: String!
}

input UserUpdateInput {
  entrance_year: Int
  introduction: String
  name: String
  profile_image: String
  school: String
}
